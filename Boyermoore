class Boyermoore:
    def __init__(self, alphabet, pattern):
        self.alphabet = alphabet
        self.pattern = pattern
        self.preprocess()
    
    def preprocess(self):
        self.process_bcr()
        self.process_gsr()
    
    def process_bcr(self):
        self.occ = {}
        for each_symb in self.alphabet:
            self.occ[each_symb] = -1
        for j in range(len(self.pattern)):
                       
            
            c = self.pattern[j]
            self.occ[c] = j
            
    def process_gsr(self):
        self.f = [0] * (len(self.pattern) + 1)
        self.s = [0] * (len(self.pattern) + 1)
        i = len(self.pattern)
        j = len(self.pattern) + 1
        self.f[i] = j
        while i>0:
            while j<= len(self.pattern) and self.pattern[i-1] != self.pattern[j-1]:
                if self.s[j] == 0: self.s[j] = j-i;
                
        
            
    
        
    
